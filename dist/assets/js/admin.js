!function(){"use strict";var __webpack_modules__={"./src/assets/js/admin.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _admin_formHandler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./admin/formHandler.js */ \"./src/assets/js/admin/formHandler.js\");\n/* harmony import */ var _admin_searchHandler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./admin/searchHandler.js */ \"./src/assets/js/admin/searchHandler.js\");\n/* harmony import */ var _admin_sessionPool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./admin/sessionPool.js */ \"./src/assets/js/admin/sessionPool.js\");\n\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  new _admin_formHandler_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('.admin_form_add');\n  new _admin_searchHandler_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('.admin_form_search');\n  const playerPoll = new _admin_sessionPool_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\n  //обрабатываем клики контейнера\n\n  document.getElementById('admin_container').addEventListener('click', async (event) => {\n    const target = event.target;\n\n    if (!target.closest('#admin_container')) {\n      return;\n    }\n\n    //старт\n    else if (target.classList.contains('start')) {\n      const player_token = target.closest('li').dataset.token;\n      const session_token = target.closest('.control')?.dataset?.session;\n      await playerPoll.startSession(session_token);\n\n      //стоп\n    } else if (target.classList.contains('stop')) {\n      await playerPoll.stopActiveSession();\n\n      //сброс результатов\n    } else if (target.classList.contains('reset')) {\n      playerPoll.loadPool();\n    }\n\n\n    // else if (target.closest('li')) {\n    //   const token = target.closest('li').dataset.token;\n    //   playerPoll.addToPool(token);\n    // }\n\n  });\n\n});\njQuery(document).ready(function ($) {\n  const $form = $('[data-form]');\n  const $toggle = $('[data-register]');\n\n  // Скрываем форму при загрузке\n  $form.hide();\n\n  // По клику по \"Регистрация\" — переключаем видимость формы\n  $toggle.on('click', function () {\n    $form.slideToggle(300); // Плавное скрытие/показ\n  });\n});\n\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/admin.js?")},"./src/assets/js/admin/formHandler.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player.js */ \"./src/assets/js/admin/player.js\");\n/* harmony import */ var _sessionPool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sessionPool.js */ \"./src/assets/js/admin/sessionPool.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n\n\n\n\n/**\n * добавление игрока\n */\nclass PlayerFormHandler {\n    constructor(formSelector) {\n        this.form = document.querySelector(formSelector);\n        if (!this.form) throw new Error(`Форма не найдена: ${formSelector}`);\n        this.form.addEventListener('submit', this.handleSubmit.bind(this));\n        this.setupBadgeIdInputListener();\n    }\n\n    /**\n     * сабмит формы\n     * @param {*} event \n     * @returns \n     */\n    async handleSubmit(event) {\n        event.preventDefault();\n        const badgeId = this.form.querySelector('#player_id')?.value.trim();\n        const name = this.form.querySelector('#player_name')?.value.trim();\n        const telegram = this.form.querySelector('#player_telegram')?.value.trim();\n\n        if (!badgeId || !name) {\n            // alert('ID на бейдже и имя обязательны.');\n            sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                icon: 'warning', // или 'success', 'error', 'warning', 'question'\n                title: 'ID на бейдже и имя обязательны.',\n                text: 'Необходимо заполнить все поля',\n            });\n            return;\n        }\n\n        const submitButton = this.form.querySelector('button[type=\"submit\"]');\n        submitButton.disabled = true;\n        submitButton.textContent = 'Добавление...';\n\n        try {\n            const player = await _player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].register(badgeId, name, telegram || null);\n            console.log(player?.token);\n\n            if (player && player.name) {\n                // alert(`Игрок зарегистрирован: ${player.name}`);\n                sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                    icon: 'success', // или 'success', 'error', 'warning', 'question'\n                    title: 'Выполнено',\n                    text: `Игрок зарегистрирован: ${player.name} и поставлен в очередь`,\n                });\n                this.form.reset();\n            } else {\n                // alert('Ошибка регистрации игрока.');\n                sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                    icon: 'error', // или 'success', 'error', 'warning', 'question'\n                    title: 'Ошибка',\n                    text: `Ошибка регистрации игрока.`,\n                });\n            }\n        } catch (error) {\n            console.error('Ошибка при регистрации игрока:', error);\n            // alert('Произошла ошибка при регистрации. Попробуйте снова.');\n            sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                icon: 'error', // или 'success', 'error', 'warning', 'question'\n                title: 'Ошибка',\n                text: `Произошла ошибка при регистрации. Попробуйте снова.`,\n            });\n        } finally {\n            submitButton.disabled = false;\n            submitButton.textContent = 'Добавить';\n        }\n    }\n\n    /**\n     * слушаем ввод для поиска по id в локальном хранилище.\n     */\n    async setupBadgeIdInputListener() {\n        const badgeIdInput = this.form.querySelector('#player_id');\n\n        badgeIdInput.addEventListener('input', async (event) => {\n            const badgeId = event.target.value.trim();\n\n            if (badgeId.length === 4) {\n                const existingPlayer = _player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPlayerByBadgeId(badgeId);\n                if (existingPlayer) {\n                    const shouldReRegister = await sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                        title: 'Подтверждение',\n                        text: `Игрок \"${existingPlayer.name}\" найден в базе.\\nХотите встать в очередь повторно?`,\n                        icon: 'question',\n                        showCancelButton: true,\n                        confirmButtonText: 'Да',\n                        cancelButtonText: 'Отмена',\n                    });\n\n                    // const shouldReRegister = confirm(\n                    //     `Игрок \"${existingPlayer.name}\" найден в базе.\\nХотите встать в очередь повторно?`\n                    // );\n\n                    if (shouldReRegister) {\n                        try {\n                            const addResult = await _sessionPool_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addToPool(existingPlayer.player_token);\n                            console.log('Результат добавления в пул:', addResult);\n\n                            // 2. Загружаем обновленный пул\n                            const poolInstance = new _sessionPool_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                            await poolInstance.loadPool();\n                        } catch (error) {\n                            console.error('Ошибка в цепочке добавления игрока:', error);\n                            throw error; // Пробрасываем ошибку дальше или обрабатываем\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PlayerFormHandler);\n\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/admin/formHandler.js?")},"./src/assets/js/admin/player.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sessionPool_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sessionPool.js */ \"./src/assets/js/admin/sessionPool.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n\n\n\n/**\n * класс профиля игрока\n */\nclass Player {\n    static BASE_URL = 'https://gameserver2.kemo.ru/api';\n\n    constructor(playerToken = null) {\n        this.playerToken = playerToken;\n    }\n\n    /**\n     * Регистрация нового игрока\n     * @param {*} badgeId \n     * @param {*} name \n     * @param {*} telegramNick \n     * @returns \n     */\n\n    static async register(badgeId, name, telegramNick = null) {\n        const payload = {\n            badge_id: String(badgeId),\n            name: name\n        };\n\n        if (telegramNick) {\n            payload.telegram_nick = telegramNick;\n        }\n\n        const response = await fetch(`${Player.BASE_URL}/players`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n\n        const result = await response.json();\n\n        if (result.data.success) {\n            const player = new Player(result.data.player_token);\n            player.badgeId = result.data.badge_id;\n            player.name = result.data.name;\n            player.telegramNick = result.data.telegram_nick;\n            player.token = result.data.player_token;\n\n            // Сохраняем игрока в localStorage\n            Player.savePlayerToLocalStorage({\n                badge_id: player.badgeId,\n                name: player.name,\n                player_token: player.token,\n                telegram_nick: player.telegramNick\n            });\n\n            console.log('Игрок зарегистрирован:', player);\n\n            //ставим в очередь\n            const pool = await _sessionPool_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addToPool(result.data.player_token);\n\n            if (pool && pool.success) {\n                const poolInstance = new _sessionPool_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n                await poolInstance.loadPool();\n            }\n            return player;\n\n        } else if (result.data.success == false && result.data.code == 'DUPLICATE_BADGE_ID') {\n            console.warn(result.data.message);\n            console.log(result);\n            // alert('Ошибка: ' + result.data.message);\n\n            sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                // icon: 'error', // или 'success', 'error', 'warning', 'question'\n                // title: 'Ошибка',\n                text: result.data.message,\n            });\n\n            //ставим в очередь\n            // const pool = await PlayerPool.addToPool(playerToken);\n\n            // if (pool && pool.success) {\n            // const poolInstance = new PlayerPool(); \n            // await poolInstance.loadPool();\n            // }\n\n            return null;\n\n        } else if (result.data.code === 'VALIDATION_ERROR') {\n            // alert('Непройдена валидация' + result.data.details)\n             sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                icon: 'error', // или 'success', 'error', 'warning', 'question'\n                title: 'Непройдена валидация',\n                text: result.data.message,\n            });\n            console.warn('🔍 Детали ошибки:', result.data.details);\n            return null;\n\n        } else {\n            // alert(\"Ошибка: \" + result.data.message);\n              sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                icon: 'error', // или 'success', 'error', 'warning', 'question'\n                title: 'Ошибка',\n                text: result.data.message,\n            });\n            console.warn('Ошибка регистрации:', result.data.message)\n            return null;\n        }\n    }\n\n    /**\n     *  Сохраняем игрока в localStorage\n     * @param {*} playerData \n     */\n    static savePlayerToLocalStorage(playerData) {\n        try {\n            const players = Player.getPlayersFromLocalStorage();\n            const existingPlayerIndex = players.findIndex(p => p.badge_id === playerData.badge_id);\n\n            if (existingPlayerIndex !== -1) {\n                players[existingPlayerIndex] = playerData;\n            } else {\n                players.push(playerData);\n            }\n\n            localStorage.setItem('registeredPlayers', JSON.stringify(players));\n        } catch (error) {\n            console.error('Ошибка при сохранении игрока:', error);\n        }\n    }\n\n    /**\n     * Получаем всех игроков из localStorage\n     * @returns \n     */\n    static getPlayersFromLocalStorage() {\n        try {\n            const playersJSON = localStorage.getItem('registeredPlayers');\n            return playersJSON ? JSON.parse(playersJSON) : [];\n        } catch (error) {\n            console.error('Ошибка при получении игроков:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Получаем игрока по badge_id\n     * @param {*} badgeId \n     * @returns \n     */\n    static getPlayerByBadgeId(badgeId) {\n        const players = Player.getPlayersFromLocalStorage();\n        return players.find(player => player.badge_id === String(badgeId));\n    }\n\n    /**\n     * Удаляем игрока из localStorage по badge_id\n     * @param {*} badgeId \n     * @returns \n     */\n    static removePlayerFromLocalStorage(badgeId) {\n        try {\n            const players = Player.getPlayersFromLocalStorage();\n            const updatedPlayers = players.filter(player => player.badge_id !== String(badgeId));\n            localStorage.setItem('registeredPlayers', JSON.stringify(updatedPlayers));\n            return true;\n        } catch (error) {\n            console.error('Ошибка при удалении игрока:', error);\n            return false;\n        }\n    }\n\n    /**\n     * поиск игрока\n     * @param {*} badgeId \n     */\n    static async search(badgeId) {\n\n        const response = await fetch(`${Player.BASE_URL}/players/badge/${badgeId}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        })\n        const result = await response.json();\n        return result;\n    }\n\n    //  Получить информацию о себе\n    async fetchProfile() {\n        if (!this.playerToken) {\n            throw new Error('🔒 Токен игрока не задан.');\n        }\n\n        const response = await fetch(`${Player.BASE_URL}/players/me`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Player-Token': this.playerToken,\n                // Можно добавить X-Game-Token, если потребуется\n            }\n        });\n\n        const result = await response.json();\n\n        if (result.data?.success) {\n            console.log('📄 Профиль игрока:', result.data);\n            return result.data;\n        } else {\n            console.warn('⚠️ Ошибка получения профиля:', result.data?.message);\n            return null;\n        }\n    }\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/admin/player.js?")},"./src/assets/js/admin/searchHandler.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player.js */ \"./src/assets/js/admin/player.js\");\n/* harmony import */ var _sessionPool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sessionPool.js */ \"./src/assets/js/admin/sessionPool.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n\n\n\n\n/**\n * поиск игрока\n */\nclass PlayerSearchHandler {\n    constructor(formSelector) {\n        this.form = document.querySelector(formSelector);\n        if (!this.form) throw new Error(`Форма не найдена: ${formSelector}`);\n        this.form.addEventListener('submit', this.searchSubmit.bind(this));\n    }\n\n    async searchSubmit(event) {\n        event.preventDefault();\n        const badgeId = this.form.querySelector('#search_player_id')?.value.trim();\n\n        if (!badgeId) {\n            // alert('ID на бейдже обязателен.');\n            sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                icon: 'warning', // или 'success', 'error', 'warning', 'question'\n                title: 'Предупреждение',\n                text: `ID на бейдже обязателен.`,\n            });\n            return;\n        }\n\n        const submitButton = this.form.querySelector('button[type=\"submit\"]');\n        submitButton.disabled = true;\n        submitButton.textContent = 'Поиск...';\n\n        const player = await _player_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].search(badgeId);\n        console.log(player);\n\n        if (player.data.success === true && player.data.exists === true) {\n            const token = player.data.player.player_token;\n            const container = document.getElementById('admin_container');\n            const allItems = container.querySelectorAll('li');\n\n            let found = false;\n            allItems.forEach(li => {\n                if (li.dataset.token === token) {\n                    li.style.display = 'grid'; // показать найденный\n                    found = true;\n                } else if (!li.classList.contains('reset')) {\n                    li.style.display = 'none'; // скрыть остальные (не сброс)\n                }\n            });\n\n            if (!found) {\n                // alert('Игрок найден, но элемент в списке не отображён.');\n                console.log(player.data.player)\n                const name = player.data.player.name;\n                const player_token = player.data.player.player_token;\n\n                const shouldReRegister = await sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                    title: 'Вопрос',\n                    text: `Игрок \"${name}\" найден в базе.\\nХотите встать в очередь?`,\n                    icon: 'question',\n                    showCancelButton: true,\n                    confirmButtonText: 'Да',\n                    cancelButtonText: 'Отмена',\n                });\n\n\n                if (shouldReRegister) {\n                    try {\n                        const addResult = await _sessionPool_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addToPool(player_token);\n                        console.log('Результат добавления в пул:', addResult);\n\n                        // 2. Загружаем обновленный пул\n                        const poolInstance = new _sessionPool_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n                        await poolInstance.loadPool();\n                    } catch (error) {\n                        console.error('Ошибка в цепочке добавления игрока:', error);\n                        throw error; // Пробрасываем ошибку дальше или обрабатываем\n                    }\n                }\n\n                submitButton.disabled = false;\n                submitButton.textContent = 'Найти';\n                return;\n            }\n\n            // добавляем кнопку сброса, если её ещё нет\n            if (!container.querySelector('li.reset')) {\n                const resetBtn = `\n                    <li class=\"reset\" style=\"cursor:pointer;\">\n                        <span style=\"pointer-events:none;\">Сбросить результаты поиска</span>\n                    </li>`;\n                container.insertAdjacentHTML('beforeend', resetBtn);\n            }\n\n        } else if (player.data.success === true && player.data.exists === false) {\n            // alert('Игрок с таким badge_id не найден.');\n            sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                icon: 'warning', // или 'success', 'error', 'warning', 'question'\n                title: 'Игрок с таким badge_id не найден.',\n                text: player.data.message,\n            });\n\n        } else {\n            // alert(\"Ошибка: \" + player.data.message);\n            console.warn(player);\n\n              sweetalert2__WEBPACK_IMPORTED_MODULE_2__.fire({\n                icon: 'error', // или 'success', 'error', 'warning', 'question'\n                title: 'Ошибка',\n                text: player.data.message,\n            });\n        }\n\n        this.form.reset();\n        submitButton.disabled = false;\n        submitButton.textContent = 'Найти';\n    }\n\n\n    createResetButton(container) {\n        if (!container.querySelector('.reset')) {\n            const resetBtn = document.createElement('li');\n            resetBtn.className = 'reset';\n            resetBtn.style.cursor = 'pointer';\n            resetBtn.innerHTML = `<span style=\"pointer-events:none;\">Сбросить результаты поиска</span>`;\n            container.appendChild(resetBtn);\n        }\n    }\n\n    // async searchSubmit(event) {\n    //     event.preventDefault();\n    //     const badgeId = this.form.querySelector('#search_player_id')?.value.trim();\n\n    //     if (!badgeId) {\n    //         alert('ID на бейдже обязателен.');\n    //         return;\n    //     }\n\n    //     const submitButton = this.form.querySelector('button[type=\"submit\"]');\n    //     submitButton.disabled = true;\n    //     submitButton.textContent = 'Поиск...';\n\n    //     const player = await Player.search(badgeId);\n    //     console.log(player);\n\n    //     if (player.data.success == true && player.data.exists == true) {\n    //         const container = document.getElementById('admin_container');\n    //         const list = `\n    //             <li>\n    //                 <span></span>\n    //                 <span>${player.data.player.badge_id}</span>\n    //                 <span>${player.data.player.name}</span>\n    //                 <div class=\"control\">\n    //                     <span></span>\n    //                     <span></span>\n    //                 </div>\n    //             </li>  \n    //             <li class=\"reset\" style=\"cursor:pointer;\">\n    //                 <span style=\"pointer-events:none;\">Сбросить результаты поиска</span>\n    //             </li>`;\n    //         container.innerHTML = '';\n    //         container.insertAdjacentHTML('beforeend', list);\n    //     } else if (player.data.success == true && player.data.exists == false) {\n    //         alert('Игрок с таким badge_id не найден')\n    //     } else {\n    //         alert(\"Ошибка: \" + player.data.message);\n    //         console.warn(player)\n    //     }\n\n    //     this.form.reset();\n    //     submitButton.disabled = false;\n    //     submitButton.textContent = 'Найти';\n    // }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PlayerSearchHandler);\n\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/admin/searchHandler.js?")},"./src/assets/js/admin/sessionPool.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _auth_adminAuth_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auth/adminAuth.js */ \"./src/assets/js/auth/adminAuth.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n\n\n\nclass PlayerPool {\n    static BASE_URL = 'https://gameserver2.kemo.ru/api';\n    static WS_URL = 'wss://gameserver2.kemo.ru/ws';\n    static gameToken = 'gAmEToKeN1';\n    static adminKey = 'Q3z8vKp9N2w5R6s1Xy7L';\n    static containerSelector = 'admin_container';\n\n\n    constructor() {\n        this.container = document.getElementById(PlayerPool.containerSelector);\n        this.loadPool();\n        this.ws = null;\n        this.sessionActive = false;\n        this.startOnHover();\n    }\n\n    /**\n     * загрузка пула\n     * @returns \n     */\n    async loadPool() {\n        const token = _auth_adminAuth_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getToken();\n\n        if (!token) {\n            console.error('[AUTH] Нет токена администратора');\n            window.location.href = '/auth.html';\n            return;\n        }\n        // ?status=started,pending,completed, stopped_by_admin, abandoned\n        const response = await fetch(`${PlayerPool.BASE_URL}/admin/games/${PlayerPool.gameToken}/pool`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                // 'X-Admin-API-Key': PlayerPool.adminKey,\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            console.error('Ошибка загрузки пула');\n            return;\n        }\n        console.log(response)\n        const pool = await response.json();\n        this.render(pool);\n    }\n\n    /**\n     * рендер всех игроков, (первичная загрузка или апдейт)\n     * @param {*} pool \n     */\n    render(pool) {\n        this.container.innerHTML = '';\n        let pendingsCount = 0;\n\n        // Порядок статусов (можно легко менять местами)\n        const statusOrder = [\n            'started',       // 1 место - самые важные\n            'pending',       // 2 место\n            'stopped_by_admin', // 3 место\n            'completed'      // 4 место - в конце\n        ];\n\n        // Сортируем сессии согласно нашему порядку\n        // const sortedSessions = [...pool.data.sessions].sort((a, b) => {\n        //     const aIndex = statusOrder.indexOf(a.status);\n        //     const bIndex = statusOrder.indexOf(b.status);\n\n        //     // Если статус не указан в порядке - ставим в конец\n        //     return (aIndex === -1 ? Infinity : aIndex) - (bIndex === -1 ? Infinity : bIndex);\n        // });\n        const sessions = [...pool.data.sessions];\n\n        // Сортировка от старых к новым (по возрастанию времени)\n        const sortByStartedAtAsc = (a, b) => {\n            const aTime = new Date(a.started_at).getTime();\n            const bTime = new Date(b.started_at).getTime();\n            return aTime - bTime; // меньшее время — раньше\n        };\n\n        // Сортировка от новых к старым (по убыванию времени)\n        const sortByStartedAtDesc = (a, b) => {\n            const aTime = new Date(a.started_at).getTime();\n            const bTime = new Date(b.started_at).getTime();\n            return bTime - aTime; // большее время — раньше в списке\n        };\n\n        // Выбираем сессии \"started\" и сортируем от старых к новым\n        const startedSessions = sessions\n            .filter(session => session.status === 'pending')\n            .sort(sortByStartedAtAsc);\n\n        // Выбираем остальные сессии и сортируем от новых к старым\n        const otherSessions = sessions\n            .filter(session => session.status !== 'pending')\n            .sort(sortByStartedAtDesc);\n\n        // Объединяем массивы: сначала started, потом остальные\n        const sortedSessions = [...startedSessions, ...otherSessions];\n\n\n\n\n        // console.log('Отсортированные сессии:', sortedSessions);\n\n        // Рендерим отсортированный список\n        sortedSessions.forEach((session, index) => {\n            index++;\n            const date = new Date(session.started_at);\n            const hours = date.getHours();\n            const minutes = date.getMinutes();\n            const formattedTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\n            // console.log(session)\n\n            let controls = '';\n\n            if (session.status == 'pending') {\n                pendingsCount++;\n                controls = `<div class=\"control\" data-session=${session.session_token}>\n                            <span>Очередь ${pendingsCount}</span>\n                            <button type=\"button\" class=\"start\"></button>\n                        </div>`;\n            } else if (session.status == 'completed') {\n                controls = `<div class=\"control\" data-session=${session.session_token}>\n                            <span class=\"coin\">${session.best_session_score}</span>\n                            <span class=\"time\">${formattedTime}</span>\n                        </div>`;\n            } else if (session.status == 'started') {\n                controls = `<div class=\"control\" data-session=${session.session_token}>\n                            <span>Идет игра</span>\n                            <button type=\"button\" class=\"stop\"></button>\n                        </div>`;\n            } else if (session.status == 'stopped_by_admin') {\n                controls = `<div class=\"control\" data-session=${session.session_token}>\n                            <span class=\"coin\">${session.best_session_score}</span>\n                            <span class=\"time\">${formattedTime}</span>\n                        </div>`;\n            }\n\n            const html = `\n                <li class=\"${session.status == 'started' ? 'active' : ''}\" data-token=${session.player_token} data-status=${session.status}>\n                    <span>${index}</span>\n                    <span>${session.badge_id}</span>\n                    <span>${session.name}</span>\n                    ${controls}\n                </li>`;\n            this.container.insertAdjacentHTML('beforeend', html);\n        });\n    }\n\n    /**\n     * добавление игрока в пул (используется в начале при регистрации \n     * и при повторном обращении к окну добавления игрока)\n     * @param {*} playerToken \n     * @returns \n     */\n\n    static async addToPool(playerToken) {\n        const token = _auth_adminAuth_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getToken();\n\n        if (!token) {\n            console.error('[AUTH] Нет токена администратора');\n            window.location.href = '/auth.html';\n            return;\n        }\n\n        if (!playerToken) {\n            console.error('Токен игрока обязателен для добавления в пул');\n            return null;\n        }\n\n        const body = {\n            player_token: playerToken\n        };\n\n        try {\n            const response = await fetch(`${PlayerPool.BASE_URL}/admin/games/${PlayerPool.gameToken}/pool`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    // 'X-Admin-API-Key': PlayerPool.adminKey,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            });\n\n            const data = await response.json();\n\n            if (!data?.data?.success) {\n                // console.warn('Не удалось добавить в пул:', data.data.message);\n                 sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                // icon: 'error', // или 'success', 'error', 'warning', 'question'\n                title: 'Не удалось добавить в пул:',\n                text: data.data.message,\n            });\n                return data.data; // Вернём, чтобы можно было проверить код ошибки (например, ALREADY_IN_POOL_OR_ACTIVE)\n            }\n\n            console.log('Игрок успешно добавлен в пул:', data.data);\n            // alert(data.data.message)\n            sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                // icon: 'info', // или 'success', 'error', 'warning', 'question'\n                // title: 'Уведомление',\n                text: data.data.message,\n            });\n\n            return data.data; // Включает session_token и прочее\n\n        } catch (error) {\n            console.error('Ошибка при добавлении в пул:', error);\n            return null;\n        }\n    }\n\n    /**\n     * старт сессии игрока. \n     * @param {*} sessionToken \n     * @returns \n     */\n    async startSession(sessionToken) {\n        if (!sessionToken) {\n            console.error('Токен сессии обязателен для запуска');\n            return null;\n        }\n\n        const stopButtonExists = this.container.querySelector('.stop');\n        if (stopButtonExists) {\n            const confirmStart = confirm('Уже есть активная сессия. Продолжить? Текущая будет остановлена без сохранения очков.');\n            if (!confirmStart) {\n                console.log('Запуск отменён пользователем');\n                return;\n            }\n        }\n\n        const token = _auth_adminAuth_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getToken();\n\n        if (!token) {\n            console.error('[AUTH] Нет токена администратора');\n            window.location.href = '/auth.html';\n            return;\n        }\n\n        try {\n            const response = await fetch(`${PlayerPool.BASE_URL}/admin/games/${PlayerPool.gameToken}/start`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    // 'X-Admin-API-Key': PlayerPool.adminKey,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ session_token: sessionToken })\n            });\n\n            const data = await response.json();\n\n            if (data?.data?.success) {\n                sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                    // icon: 'info', // или 'success', 'error', 'warning', 'question'\n                    // title: 'Уведомление',\n                    text: data.data.message,\n                });\n                console.log('Сессия успешно запущена:', data.data.message);\n                // alert(data.data.message);\n                // Обновим список после запуска \n                await this.loadPool();\n                // 3. Запускаем WebSocket соединение\n                await this.connectWebSocket(sessionToken);\n                this.sessionActive = true;\n                return data.data;\n            } else {\n                console.warn('Ошибка запуска сессии:', data.data.message);\n                sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                    // icon: 'info', // или 'success', 'error', 'warning', 'question'\n                    // title: 'Уведомление',\n                    text: data.data.message,\n                });\n\n                // alert(data.data.message);\n                return data.data;\n            }\n        } catch (error) {\n            console.error('Ошибка при запуске сессии:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Оставовка секции по клику\n     */\n    async stopActiveSession() {\n        try {\n\n            const token = _auth_adminAuth_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getToken();\n\n            if (!token) {\n                console.error('[AUTH] Нет токена администратора');\n                window.location.href = '/auth.html';\n                return;\n            }\n\n            const response = await fetch(`${PlayerPool.BASE_URL}/admin/games/${PlayerPool.gameToken}/stop`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    //   'X-Admin-API-Key': PlayerPool.adminKey,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            const data = await response.json();\n\n            if (response.ok && data?.data?.success) {\n                // alert('Сессия остановлена администратором');\n\n                sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                    // icon: 'info', // или 'success', 'error', 'warning', 'question'\n                    // title: 'Уведомление',\n                    text: 'Сессия остановлена администратором',\n                });\n\n                console.log(data.data.message);\n                await this.loadPool();\n            } else {\n                console.warn(data.data?.message || 'Неизвестная ошибка при остановке сессии');\n            }\n        } catch (error) {\n            console.error('Ошибка при остановке активной сессии:', error);\n        }\n    }\n\n\n    /**\n     * Подключение к WebSocket серверу\n     * @param {string} sessionToken \n     * @returns {Promise<void>}\n     */\n    connectWebSocket(sessionToken) {\n        return new Promise((resolve, reject) => {\n            const wsUrl = `${PlayerPool.WS_URL}?game_token=${PlayerPool.gameToken}&role=admin`;\n            this.ws = new WebSocket(wsUrl);\n\n            console.log('[WS] Подключаемся к:', wsUrl);\n\n            const authPayload = {\n                token: _auth_adminAuth_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getToken(),\n                admin_key: PlayerPool.adminKey\n            };\n\n            this.ws.onopen = () => {\n                if (this.ws.readyState === WebSocket.OPEN) {\n                    this.ws.send(JSON.stringify(authPayload));\n                    console.log('[WS] Аутентификация отправлена');\n                }\n            };\n\n            this.ws.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                console.log('[WS] Получено сообщение:', data);\n\n                switch (data.event) {\n                    case 'auth_ok':\n                        console.log('[WS] Аутентификация успешна');\n                        resolve();\n                        break;\n\n                    case 'auth_failed':\n                        console.error('[WS] Ошибка авторизации:', data.message);\n                        this.ws.close();\n                        reject(data.message);\n                        break;\n\n                    case 'round_completed':\n                        this.handleRoundCompleted(data.payload);\n                        this.loadPool();\n                        break;\n\n                    case 'game_completed':\n                        this.handleGameCompleted(data.payload);\n                        this.loadPool();\n                        // alert('Игра была завершена')\n                        sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                            // icon: 'info', // или 'success', 'error', 'warning', 'question'\n                            // title: 'Уведомление',\n                            text: 'Игра была завершена',\n                        });\n                        break;\n\n                    default:\n                        console.warn('[WS] Неизвестное событие:', data.event);\n                }\n            };\n\n            this.ws.onerror = (error) => {\n                console.error('[WS] Ошибка соединения:', error);\n                reject(error);\n            };\n\n            this.ws.onclose = (event) => {\n                console.log(`[WS] Соединение закрыто. Код: ${event.code}, Причина: ${event.reason}`);\n                this.sessionActive = false;\n            };\n        });\n    }\n\n    /**\n     * Обработка завершения раунда\n     * @param {object} payload \n     */\n    handleRoundCompleted(payload) {\n        console.log('[WS] Раунд завершен:', payload);\n    }\n\n    /**\n     * Обработка завершения игры\n     * @param {object} payload \n     */\n    handleGameCompleted(payload) {\n        console.log('[WS] Игра завершена:', payload);\n\n        // Закрываем соединение\n        this.disconnectWebSocket();\n    }\n\n    /**\n     * Отключение от WebSocket\n     */\n    disconnectWebSocket() {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.close();\n            console.log('[WS] Соединение закрыто');\n        }\n        this.sessionActive = false;\n    }\n\n    /**\n     * добавление в пул по кнопке\n     */\n    startOnHover() {\n        document.addEventListener('click', async (event) => {\n            const li = event.target.closest('li[data-status]');\n            if (!li) return;\n\n            // Если клик по кнопке — выходим, не мешаем\n            if (event.target.closest('button')) return;\n\n            const token = li.dataset.token;\n            console.log('Клик по LI, token:', token);\n\n            // Показываем SweetAlert2 с подтверждением\n            const result = await sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire({\n                // title: 'Добавить в пул?',\n                text: 'Вы уверены, что хотите добавить этого игрока в пул?',\n                // icon: 'question',\n                showCancelButton: true,\n                confirmButtonText: 'Да',\n                cancelButtonText: 'Отмена',\n            });\n\n            // Если пользователь подтвердил\n            if (result.isConfirmed) {\n                try {\n                    const addResult = await PlayerPool.addToPool(token);\n                    // console.log('Результат:', addResult);\n                    this.loadPool();\n                } catch (err) {\n                    console.error('Ошибка при добавлении в пул:', err);\n                    await sweetalert2__WEBPACK_IMPORTED_MODULE_1__.fire('Ошибка', 'Не удалось добавить игрока в пул.', 'error');\n                }\n            }\n        });\n    }\n\n\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (PlayerPool);\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/admin/sessionPool.js?")},"./src/assets/js/auth/adminAuth.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\nclass AdminAuth {\n    constructor() {\n        this.apiUrl = 'https://gameserver2.kemo.ru/api/admin/login-token';\n        this.tokenKey = 'admin_token';\n        this.expireKey = 'admin_token_expires';\n        this.form = document.getElementById('auth_form');\n        this.loginInput = document.getElementById('auth_login');\n        this.passInput = document.getElementById('auth_pass');\n\n        if (!this.form) {\n            console.info('[AUTH] Не на странице авторизации. Форма отсутствует.');\n            // return; // прерываем инициализацию\n        }else{\n            this.init();\n        }\n\n    }\n\n    init() {\n        this.form.addEventListener('submit', (e) => {\n            // console.log(this.form);\n            e.preventDefault();\n            this.login();\n        });\n    }\n\n    async login() {\n        const password = this.passInput.value.trim();\n\n        if (!password) {\n            alert('Введите пароль');\n            return;\n        }\n\n        try {\n            const response = await fetch(this.apiUrl, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ password })\n            });\n\n            const result = await response.json();\n\n            if (result.data?.success) {\n                const token = result.data.token;\n                const expires = Date.now() + result.data.expires_in * 1000;\n\n                localStorage.setItem(this.tokenKey, token);\n                localStorage.setItem(this.expireKey, expires);\n\n                console.log('[AUTH] Авторизация успешна. Токен сохранён');\n                window.location.href = '/admin.html'; // или нужная страница\n            } else {\n                alert(result.data.message || 'Ошибка авторизации');\n            }\n\n        } catch (error) {\n            console.error('[AUTH] Ошибка при авторизации:', error);\n            alert('Ошибка подключения к серверу');\n        }\n    }\n\n    static logout() {\n        localStorage.removeItem('admin_token');\n        localStorage.removeItem('admin_token_expires');\n        window.location.href = '/auth.html';\n    }\n\n    static isAuthenticated() {\n        const token = localStorage.getItem('admin_token');\n        const expires = localStorage.getItem('admin_token_expires');\n        return token && expires && Date.now() < Number(expires);\n    }\n\n    static getToken() {\n        return localStorage.getItem('admin_token');\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AdminAuth);\n\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/auth/adminAuth.js?")}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];return void 0!==e||(e=__webpack_module_cache__[n]={exports:{}},__webpack_modules__[n].call(e.exports,e,e.exports,__webpack_require__)),e.exports}__webpack_require__.m=__webpack_modules__,!function(){var i=[];__webpack_require__.O=function(n,e,t,s){if(!e){for(var a=1/0,r=0;r<i.length;r++){for(var o,e=i[r][0],t=i[r][1],s=i[r][2],l=!0,_=0;_<e.length;_++)(!1&s||s<=a)&&Object.keys(__webpack_require__.O).every(function(n){return __webpack_require__.O[n](e[_])})?e.splice(_--,1):(l=!1,s<a&&(a=s));l&&(i.splice(r--,1),void 0!==(o=t()))&&(n=o)}return n}s=s||0;for(var r=i.length;0<r&&i[r-1][2]>s;r--)i[r]=i[r-1];i[r]=[e,t,s]}}(),__webpack_require__.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},__webpack_require__.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},!function(){function n(n,e){var t,s,a,r=e[0],o=e[1],l=e[2],_=0;if(r.some(function(n){return 0!==i[n]})){for(t in o)__webpack_require__.o(o,t)&&(__webpack_require__.m[t]=o[t]);l&&(a=l(__webpack_require__))}for(n&&n(e);_<r.length;_++)s=r[_],__webpack_require__.o(i,s)&&i[s]&&i[s][0](),i[s]=0;return __webpack_require__.O(a)}var i={admin:0},e=(__webpack_require__.O.j=function(n){return 0===i[n]},self.webpackChunkvitaliy_wp_dev=self.webpackChunkvitaliy_wp_dev||[]);e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))}();var __webpack_exports__=__webpack_require__.O(void 0,["common"],function(){return __webpack_require__("./src/assets/js/admin.js")});__webpack_require__.O(__webpack_exports__)}();