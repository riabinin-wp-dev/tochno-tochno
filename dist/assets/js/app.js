!function(){"use strict";var __webpack_modules__={"./src/assets/js/app.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_ratio_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/ratio.js */ "./src/assets/js/common/ratio.js");\n/* harmony import */ var _game_gameManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game/gameManager.js */ "./src/assets/js/game/gameManager.js");\n\n\n\ndocument.addEventListener(\'DOMContentLoaded\',()=>{\n    new _game_gameManager_js__WEBPACK_IMPORTED_MODULE_1__["default"](); \n})\n\n\n/**\n * ratio\n */\nwindow.addEventListener(\'load\', _common_ratio_js__WEBPACK_IMPORTED_MODULE_0__["default"]);\nwindow.addEventListener(\'resize\', _common_ratio_js__WEBPACK_IMPORTED_MODULE_0__["default"]);\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/app.js?')},"./src/assets/js/auth/adminAuth.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\nclass AdminAuth {\n    constructor() {\n        this.apiUrl = 'https://gameserver2.kemo.ru/api/admin/login-token';\n        this.tokenKey = 'admin_token';\n        this.expireKey = 'admin_token_expires';\n        this.form = document.getElementById('auth_form');\n        this.loginInput = document.getElementById('auth_login');\n        this.passInput = document.getElementById('auth_pass');\n\n        if (!this.form) {\n            console.info('[AUTH] Не на странице авторизации. Форма отсутствует.');\n            // return; // прерываем инициализацию\n        }else{\n            this.init();\n        }\n\n    }\n\n    init() {\n        this.form.addEventListener('submit', (e) => {\n            // console.log(this.form);\n            e.preventDefault();\n            this.login();\n        });\n    }\n\n    async login() {\n        const password = this.passInput.value.trim();\n\n        if (!password) {\n            alert('Введите пароль');\n            return;\n        }\n\n        try {\n            const response = await fetch(this.apiUrl, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ password })\n            });\n\n            const result = await response.json();\n\n            if (result.data?.success) {\n                const token = result.data.token;\n                const expires = Date.now() + result.data.expires_in * 1000;\n\n                localStorage.setItem(this.tokenKey, token);\n                localStorage.setItem(this.expireKey, expires);\n\n                console.log('[AUTH] Авторизация успешна. Токен сохранён');\n                window.location.href = '/admin.html'; // или нужная страница\n            } else {\n                alert(result.data.message || 'Ошибка авторизации');\n            }\n\n        } catch (error) {\n            console.error('[AUTH] Ошибка при авторизации:', error);\n            alert('Ошибка подключения к серверу');\n        }\n    }\n\n    static logout() {\n        localStorage.removeItem('admin_token');\n        localStorage.removeItem('admin_token_expires');\n        window.location.href = '/auth.html';\n    }\n\n    static isAuthenticated() {\n        const token = localStorage.getItem('admin_token');\n        const expires = localStorage.getItem('admin_token_expires');\n        return token && expires && Date.now() < Number(expires);\n    }\n\n    static getToken() {\n        return localStorage.getItem('admin_token');\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AdminAuth);\n\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/auth/adminAuth.js?")},"./src/assets/js/common/ratio.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/**\n * ratio\n */\nfunction checkRatio() {\n    const ratio = window.innerHeight / window.innerWidth;\n    if (ratio > 1.6) {\n      document.body.classList.add('vertical');\n      document.body.classList.remove('horizontal');\n    } else {\n      document.body.classList.add('horizontal');\n      document.body.classList.remove('vertical');\n    }\n  }\n\n  /* harmony default export */ __webpack_exports__[\"default\"] = (checkRatio);\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/common/ratio.js?")},"./src/assets/js/game/UIController.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n// import Swal from 'sweetalert2';\n\nclass UIController {\n\n    constructor() {\n        this.roundEl = document.querySelector('#rounds');\n        this.roundStatus = this.roundEl.querySelector('.round_status span');\n        this.roundTarget = this.roundEl.querySelector('.round_target');\n        this.counterContainer = this.roundEl.querySelector('.round_container');\n        this.roundInfo = this.roundEl.querySelector('.round_info');\n        this.roundCoinInfo = this.roundEl.querySelector('.round_coin_info');\n        this.roundResult = this.roundEl.querySelector('.round_result');\n        this.roundResultTotal = this.roundEl.querySelector('.round_reult_text');\n        this.roundFinish = this.roundEl.querySelector('.round_finish');\n        this.main = document.querySelector('main');\n    }\n\n    /**\n     * подготовка секции к райнду\n     */\n    prepareSectionForRound() {\n        this.roundEl.classList.add('blur');\n        if (this.roundTarget.classList.contains('winner')) {\n            this.roundTarget.classList.remove('winner');\n        }\n        this.hideElement([this.roundCoinInfo, this.roundResult, this.roundResultTotal, this.roundFinish]);\n        this.showElement([this.roundStatus, this.roundTarget, this.counterContainer, this.roundInfo]);\n        setTimeout(() => {\n            this.roundEl.classList.remove('blur');\n        }, 800);\n    }\n\n    /**\n     * скрываем элементы \n     * @param {*} elements - массив элементов\n     */\n    // hideElement(elements) {\n    //     elements.forEach(el => {\n    //         el.classList.add('slide-hidden');\n    //         setTimeout(() => {\n    //             el.classList.add('none');\n    //         }, this.animationTime);\n    //     });\n    // }\n    hideElement(elements) {\n        $(elements).each(function () {\n            $(this).hide();\n        });\n    }\n\n    /**\n    * показываем элементы \n    * @param {*} elements - массив элементов\n    */\n    // showElement(elements) {\n    //     elements.forEach(el => {\n    //         el.classList.remove('none');\n    //         setTimeout(() => {\n    //             el.classList.remove('slide-hidden');\n    //         }, 10);\n    //     });\n    // }\n    showElement(elements) {\n        $(elements).each(function () {\n            $(this).show();\n        });\n    }\n    /**\n     * ожидание клика пробела или энтера\n     * @returns \n     */\n    waitForKeyPress() {\n        return new Promise(resolve => {\n            function handler(event) {\n                if (event.code === 'Enter' || event.code === 'Space') {\n                    document.removeEventListener('keydown', handler);\n                    resolve();\n                }\n            }\n            document.addEventListener('keydown', handler);\n        });\n    }\n\n    /**\n     * ожидание клика мвшки или клавиши\n     * @returns \n     */\n    waitForClick() {\n        return new Promise(resolve => {\n            const handler = () => {\n                document.removeEventListener('keydown', handler);\n                document.removeEventListener('mousedown', handler);\n                resolve();\n            };\n\n            document.addEventListener('keydown', handler);\n            document.addEventListener('mousedown', handler);\n        });\n    }\n\n    /**\n     * \n     * @param {*} counterArr \n     */\n    // updateCounter(counterArr) {\n    //     console.log(counterArr);\n    //     this.counterContainer.innerHTML = counterArr.map((c, i, arr) => `\n    //         <div class=\"digit-container\">\n    //             ${c.alfabet[c.current]}\n    //             <div class=\"shadow ${i === arr.length - 1 ? 'green' : 'grey'}\"></div>\n    //         </div>\n    //     `).join('');\n    // }\n    updateCounter(counterArr) {\n        // Список исключений для последнего элемента\n        const lastItemExceptions = ['млн', 'лет', '%'];\n\n        this.counterContainer.innerHTML = counterArr.map((c, i, arr) => {\n            const isLastItem = i === arr.length - 1;\n            const currentValue = c.alfabet[c.current];\n            const isException = isLastItem && lastItemExceptions.includes(currentValue);\n\n            // Для исключений не добавляем цветной класс\n            const shadowClass = isException ? '' : (isLastItem ? 'green' : 'grey');\n\n            return `\n            <div class=\"digit-container\">\n                ${currentValue ?? '?'}\n                ${shadowClass ? `<div class=\"shadow ${shadowClass}\"></div>` : ''}\n            </div>\n        `;\n        }).join('');\n    }\n\n    /**\n     * обработка три неудачи подряд\n     */\n    async showTooManyFails() {\n        this.main.classList.remove('active');\n        await this.delay(300);\n\n        this.roundEl.classList.add('default');\n        this.roundTarget.innerHTML = 'Мы так и знали, что Баромир справится лучше тебя!';\n        this.roundResultTotal.innerHTML = '<p>Но приходи позже и попробуй ещё раз!</p>'\n\n        this.hideElement([this.roundStatus.parentElement, this.roundCoinInfo, this.counterContainer, this.roundResult, this.roundInfo]);\n        this.showElement([this.roundFinish, this.roundResultTotal]);\n        await this.delay(500);\n        this.main.classList.add('active');\n\n        // перезагрузка\n        await this.delay(5000);\n        location.reload();\n    }\n\n\n    /**\n     * показываем секцию\n     * @param {*} id  id старой секции\n     * @param {*} idNew id новой секции\n     * @param {*}  name имя для первой секции отображать \n     */\n    showSection(id, idNew, name = '') {\n        this.main.classList.remove('active');\n        setTimeout(() => {\n            if (name !== '') {\n                document.querySelector('[data-name]').textContent = name;\n            }\n            const section = document.getElementById(id);\n            const next = document.getElementById(idNew);\n            section.classList.remove('active');\n            section.classList.add('none')\n            next.classList.remove('none');\n            next.classList.add('active')\n            setTimeout(() => {\n                this.main.classList.add('active')\n            }, 200);\n        }, 200);\n    }\n    // showSection(id, idNew, name = '') {\n    //     // Устанавливаем имя если передано\n    //     if (name !== '') {\n    //         $('[data-name]').text(name);\n    //     }\n\n    //     // Скрываем текущую секцию\n    //     $('#' + id)\n    //         .hide()\n    //         .removeClass('active')\n    //         .addClass('none');\n\n    //     // Показываем новую секцию\n    //     $('#' + idNew)\n    //         .addClass('blur')\n    //         .show()\n    //         .removeClass('none')\n    //         .addClass('active');\n\n    //     setTimeout(() => {\n    //         $('#' + idNew).removeClass('blur');\n    //     }, 300);\n    // }\n\n    /**\n    * таймер обратного отсчета\n    */\n    async runBacktimer() {\n        const countEl = document.querySelector('[data-count]');\n        const textEl = document.querySelector('[data-text]');\n\n        for (let i = 3; i > 0; i--) {\n\n            countEl.querySelector(`[data-num=\"${i}\"]`).classList.add('active');\n            await this.delay(1000);\n            countEl.querySelector(`[data-num=\"${i}\"]`).classList.add('slide');\n\n        }\n\n        setTimeout(() => {\n            textEl.classList.add('active');\n        }, 300);\n        await this.delay(1000);\n        textEl.classList.add('scale');\n        setTimeout(() => {\n            textEl.classList.remove('active');\n        }, 300);\n\n\n        //продублируем время для анимаации\n        await this.delay(300)\n        this.main.classList.remove('active');\n\n        document.getElementById('backtimer').classList.add('blur');\n    }\n\n    /**\n    * задержка\n    * @param {*} ms \n    * @returns \n    */\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    /**\n     * показываем раунд\n     * @param {*} roundNumber \n     * @param {*} counterArr \n     * @param {*} fact \n     */\n    showRound(roundNumber, counterArr, fact) {\n        this.roundEl.classList.remove('none');\n\n        // Обновляем инфу о раунде\n        this.roundStatus.textContent = roundNumber;\n        this.roundStatus.closest('.round_status').style.display = 'block';\n        this.roundTarget.style.display = 'block';\n        this.roundInfo.style.display = 'block';\n\n        // Формируем строку цели\n        const target = counterArr.map(c => c.alfabet[c.target]).join('');\n        const formattedTarget = target.replace(/([A-Za-zА-Яа-яЁё])/u, ' $1');\n        this.roundTarget.innerHTML = `ПОЙМАЙ ${formattedTarget}`;\n        this.roundInfo.innerHTML = fact;\n\n        // Очищаем и показываем контейнер для счётчика\n        this.counterContainer.innerHTML = '';\n        this.counterContainer.style.display = 'flex';\n\n        // Список исключений для последнего элемента\n        const lastItemExceptions = ['млн', 'лет', '%'];\n\n        counterArr.forEach((digit, i) => {\n            const digitContainer = document.createElement('div');\n            digitContainer.classList.add('digit-container');\n            const safeIndex = typeof digit.current === 'number' ? digit.current : 0;\n            const currentValue = digit.alfabet[safeIndex] ?? '?';\n            digitContainer.textContent = currentValue;\n\n            const isLastItem = i === counterArr.length - 1;\n            const isException = isLastItem && lastItemExceptions.includes(currentValue);\n\n            // Всегда создаем shadow элемент\n            const shadow = document.createElement('div');\n            shadow.classList.add('shadow');\n\n            // Добавляем цветной класс только если это не исключение\n            if (!isException) {\n                shadow.classList.add(isLastItem ? 'green' : 'grey');\n                digitContainer.appendChild(shadow);\n            }\n            \n            this.counterContainer.appendChild(digitContainer);\n        });\n    }\n\n    /**\n     * блик фона\n     * @param {*} selector \n     */\n    async showblick(selector) {\n        const image = document.querySelector(selector);\n        image.classList.remove('hide');\n        image.classList.add('blick');\n        await this.delay(5000);\n        image.classList.remove('blick');\n        image.classList.add('hide');\n    }\n\n    /**\n     * показываем успех\n     * @param {*} result результат объект \n     */\n    async showSuccess(result) {\n        this.changecolor('green');\n        this.roundEl.classList.add('right');\n        this.roundEl.classList.remove('default');\n\n        setTimeout(() => {\n            this.showSalut();\n        }, 2000);\n        await this.showblick('.victory');\n\n        this.hideElement([this.counterContainer, this.roundInfo]);\n        this.showElement([this.roundCoinInfo, this.roundResult]);\n\n        this.roundTarget.classList.add('winner');\n        this.roundTarget.innerHTML = 'Точно, как 2ГИС!  <br> На твоём счету:';\n\n        this.roundCoinInfo.querySelector('span').textContent = result.points;\n\n        for (let i = 3; i > 0; i--) {\n            this.roundResult.querySelector('span').textContent = i;\n            await this.delay(1000);\n        }\n        this.roundEl.classList.add('default');\n        this.roundEl.classList.remove('right');\n    }\n\n    /**\n     * отрабатываем неудачу\n     * @param {*} result \n     */\n    async showFail(result) {\n        this.changecolor('red');\n        this.roundEl.classList.add('wrong');\n        this.roundEl.classList.remove('default');\n        await this.showblick('.fail');\n\n        this.hideElement([this.counterContainer, this.roundInfo]);\n        this.showElement([this.roundResult]);\n        this.roundTarget.classList.add('winner');\n        if (result.round === 3) {\n            this.roundTarget.innerHTML = 'Мда, плохо. Плохо-плохо, неважно 😐 <br> Ещё и попытки закончились';\n            this.roundResult.innerHTML = 'Общий результат через <span>3</span>'\n        } else {\n            this.roundTarget.innerHTML = 'Мда, плохо. Плохо-плохо, неважно 😐 <br> Попробуй ещё раз!';\n        }\n        for (let i = 3; i > 0; i--) {\n            this.roundResult.querySelector('span').textContent = i;\n            await this.delay(1000);\n        }\n\n        this.roundEl.classList.add('default');\n        this.roundEl.classList.remove('wrong');\n\n        // result.round == 3 ? this.showEnd(result) : '';\n    }\n\n    /**\n     * отображаем салют\n     * @returns \n     */\n    showSalut() {\n        return new Promise((resolve) => {\n            const coinImages = ['Coin.svg', 'Silver.svg', 'Gold.svg'];\n            const count = 100;\n            const container = document.getElementById('coin-fireworks');\n            if (!container) return resolve();\n\n            let done = 0;\n\n            for (let i = 0; i < count; i++) {\n                const img = document.createElement('img');\n                img.src = `./assets/images/salut/${coinImages[Math.floor(Math.random() * coinImages.length)]}`;\n                img.classList.add('coin-piece');\n\n                const startX = Math.random() * window.innerWidth;\n                const delay = Math.random() * 1000;\n\n                img.style.left = `${startX}px`;\n                img.style.top = `-50px`;\n                img.style.animationDelay = `${delay}ms`;\n\n                container.appendChild(img);\n\n                setTimeout(() => {\n                    img.remove();\n                    done++;\n                    if (done === count) resolve();\n                }, 2500 + delay); // задержка + длительность анимации\n            }\n        });\n    }\n\n\n\n    /**\n     * смена фона цифр\n     * @param {*} color \n     */\n    changecolor(color) {\n        const shadows = this.counterContainer.querySelectorAll('.shadow');\n        shadows.forEach(shadow => {\n            if (shadow.classList.contains('grey') || shadow.classList.contains('green')) {\n                shadow.classList.remove('grey');\n                shadow.classList.remove('green');\n                shadow.classList.add(color);\n            }\n        });\n    }\n\n    /**\n     * отображение итога\n     * @param {*} scope \n     */\n    async showEnd(scope) {\n        this.main.classList.remove('active');\n        await this.delay(300);\n\n        this.roundEl.classList.add('default');\n        this.roundTarget.innerHTML = 'Игра закончилась, <br> на твоём счету:';\n        this.roundCoinInfo.querySelector('span').textContent = scope;\n\n        this.hideElement([this.roundStatus.parentElement, this.counterContainer, this.roundResult, this.roundInfo]);\n        this.showElement([this.roundCoinInfo, this.roundResultTotal, this.roundFinish]);\n        await this.delay(300);\n        this.main.classList.add('active');\n\n\n        // перезагрузка\n        await this.delay(5000);\n        location.reload();\n\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (UIController);\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/game/UIController.js?")},"./src/assets/js/game/calculateCurrent.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/**\n * расчет current\n * @param {*} target \n * @param {*} alfabet \n * @param {*} totalTime \n * @param {*} interval \n * @returns \n */\n\nfunction calculateCurrent(target, alfabet, totalTime = 10000, interval = 120) {\n    const steps = Math.floor(totalTime / interval);\n    const index = alfabet.indexOf(target);\n    const len = alfabet.length;\n\n    // двигаемся по кругу, чтобы попасть в target через steps шагов\n    const start = (index - steps + len) % len;\n\n    return start;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (calculateCurrent);\n\n\n//вставка в game manager\n// this.counterValues = question.counter.map(c => {\n        //     const { target, alfabet } = c;\n        \n        //     if (!Array.isArray(alfabet)) {\n        //         console.warn('❗ alfabet не массив:', alfabet);\n        //         return c;\n        //     }\n        \n        //     if (typeof target !== 'number') {\n        //         console.warn('❗ target не число:', target);\n        //         return c;\n        //     }\n        \n        //     if (target < 0 || target >= alfabet.length) {\n        //         console.warn('❗ target вне диапазона:', target, 'alfabet:', alfabet);\n        //         return c;\n        //     }\n        \n        //     const targetChar = alfabet[target];\n        \n        //     if (typeof targetChar === 'undefined') {\n        //         console.warn('❗ targetChar undefined. target:', target, 'alfabet:', alfabet);\n        //     } else {\n        //         console.log('✅ targetChar:', targetChar, 'alfabet:', alfabet);\n        //     }\n        \n        //     let calculatedCurrent;\n        //     try {\n        //         calculatedCurrent = calculateCurrent(targetChar, alfabet);\n        //     } catch (e) {\n        //         console.error('Ошибка при расчёте current:', e);\n        //         calculatedCurrent = c.current ?? 0;\n        //     }\n        \n        //     return {\n        //         ...c,\n        //         current: calculatedCurrent\n        //     };\n        // });\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/game/calculateCurrent.js?")},"./src/assets/js/game/dataManager.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\nclass DataManager {\n  constructor() {\n    this.questions = [];\n    this.usedIndexes = new Set();\n  }\n\n  /**\n   * Загружает вопросы из локального JSON-файла\n   */\n  async loadQuestions() {\n    if (this.questions.length) return; // Уже загружены\n\n    try {\n      const response = await fetch('./assets/js/questions.json');\n      if (!response.ok) {\n        throw new Error('Ошибка загрузки questions.json');\n      }\n\n      this.questions = await response.json();\n    } catch (err) {\n      console.error('Ошибка при загрузке вопросов:', err);\n    }\n  }\n\n  /**\n   * Возвращает случайный вопрос\n   */\n  async getRandomQuestion() {\n    await this.loadQuestions();\n\n    if (this.usedIndexes.size >= this.questions.length) {\n      console.warn('Все вопросы использованы!');\n      return null; // Или: this.resetUsedIndexes(); чтобы начать заново\n    }\n\n    let index;\n    do {\n      index = Math.floor(Math.random() * this.questions.length);\n    } while (this.usedIndexes.has(index));\n\n    this.usedIndexes.add(index);\n    return this.questions[index];\n  }\n\n  /**\n   * Очистка истории использования (если игра начинается заново)  (если не буду перезагружать)\n   */\n  resetUsedIndexes() {\n    this.usedIndexes.clear();\n  }\n\n  calculateInitialCurrents(counterValues) {\n    const exceptions = ['млн', 'лет', '%', '.', 'k', 'br'];\n    const totalTime = 10000; // 10 секунд\n    const stepDelay = 120;   // задержка между шагами\n    const totalSteps = Math.floor(totalTime / stepDelay); // ~83 шага\n\n    // Фильтруем только анимируемые цифры (исключая символы)\n    const activeCounters = counterValues.filter(counter =>\n      !counter.alfabet.some(symbol => exceptions.includes(symbol))\n    );\n\n    // Если нет анимируемых цифр, возвращаем как есть\n    if (activeCounters.length === 0) return counterValues;\n\n    // Распределяем шаги между цифрами (последняя цифра крутится чаще)\n    const stepsPerDigit = Math.ceil(totalSteps / activeCounters.length);\n\n    return counterValues.map(counter => {\n      // Пропускаем исключения (просто ставим current = target)\n      if (counter.alfabet.some(symbol => exceptions.includes(symbol))) {\n        return { ...counter, current: counter.target };\n      }\n\n      const alphabetSize = counter.alfabet.length;\n      const target = counter.target;\n\n      // Вычисляем начальное значение: target - stepsPerDigit\n      let initialCurrent = target - stepsPerDigit;\n\n      // Если ушли в минус, корректируем с учётом цикличности\n      while (initialCurrent < 0) {\n        initialCurrent += alphabetSize;\n      }\n\n      // Гарантируем, что current < target (чтобы анимация шла вверх)\n      if (initialCurrent >= target) {\n        initialCurrent = (target - 1 + alphabetSize) % alphabetSize;\n      }\n\n      return { ...counter, current: initialCurrent };\n    });\n  }\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (DataManager);\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/game/dataManager.js?")},"./src/assets/js/game/gameManager.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculateCurrent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculateCurrent.js */ \"./src/assets/js/game/calculateCurrent.js\");\n/* harmony import */ var _dataManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataManager.js */ \"./src/assets/js/game/dataManager.js\");\n/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player.js */ \"./src/assets/js/game/player.js\");\n/* harmony import */ var _UIController_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./UIController.js */ \"./src/assets/js/game/UIController.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n/**\n * Менеджер управлеия игры\n */\n\n\n\n\n\n\n\nclass GameManager {\n\n    static gameToken = 'gAmEToKeN1';\n    static adminKey = 'Q3z8vKp9N2w5R6s1Xy7L';\n\n    constructor() {\n        this.round = 0;\n        this.maxRounds = 3;\n        this.failedAttempts = 0;\n        this.maxFails = 3;\n\n        this.started = false;\n\n        this.player = new _player_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        this.ui = new _UIController_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n        this.data = new _dataManager_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n        this.ws = null;\n\n        this.init();\n    }\n\n    async init() {\n        // /первый экран\n        await this.connectWebSocket();\n        this.ui.showSection('start', 'hello', this.player.getName());\n\n        //второй экран\n        await this.ui.waitForKeyPress();\n        this.ui.showSection('hello', 'backtimer');\n        await this.ui.runBacktimer();\n        this.ui.showSection('backtimer', 'rounds');\n\n        //раунд\n        this.startGame();\n\n    }\n\n\n    /**\n     * веб сокет\n     * @returns  \n     */\n    connectWebSocket() {\n        return new Promise((resolve, reject) => {\n            const wsUrl = `wss://gameserver2.kemo.ru/ws?game_token=${GameManager.gameToken}`;\n            this.ws = new WebSocket(wsUrl);\n\n            console.log(wsUrl);\n            const authPayload = {\n                admin_key: GameManager.adminKey\n            };\n\n            this.ws.onopen = () => {\n                if (this.ws.readyState === WebSocket.OPEN) {\n                    this.ws.send(JSON.stringify(authPayload));\n                    console.log('[WS] Подключено. Отправляем admin_key: ', authPayload);\n                } else {\n                    console.error('[WS] WebSocket не в состоянии OPEN');\n                }\n            };\n\n            this.ws.onmessage = async (event) => {\n                const data = JSON.parse(event.data);\n\n                switch (data.event) {\n                    case 'auth_ok':\n                        console.log('[WS] Аутентификация успешна');\n                        break;\n\n                    case 'auth_failed':\n                        console.error('[WS] Ошибка авторизации:', data.message);\n                        this.ws.close();\n                        reject(data.message);\n                        break;\n\n                    case 'game_started':\n                        console.log('[WS] Получено событие game_started', data.payload);\n                        this.player.initializePlayer(data.payload);\n                        resolve();\n                        break;\n                    case 'game_ended':\n                        console.log('[WS] Получено событие game_ended', data.payload);\n                        if (this.player.comparePlayer(data.payload)) {\n                            sweetalert2__WEBPACK_IMPORTED_MODULE_4__.fire({\n                                text: 'Игра остановлена администратором',\n                            }).then(() => {\n                                window.location.reload();\n                            });\n                        }\n                        resolve();\n                        break;\n\n                    default:\n                        console.warn('[WS] Неизвестное событие:', data);\n                        break;\n                }\n            };\n\n            this.ws.onerror = (error) => {\n                console.error('[WS] Ошибка соединения:', error);\n                reject(error);\n            };\n\n            this.ws.onclose = (event) => {\n                console.warn(`[WS] Соединение закрыто. Код: ${event.code}, причина: ${event.reason}`);\n                if (event.code === 1008) { // 1008 обычно для ошибок авторизации\n                    console.error('[WS] Ошибка авторизации - проверьте admin_key');\n                }\n            };\n        });\n    }\n\n    /**\n     * старт основной фазы игры\n     */\n    async startGame() {\n        // await this.data.loadQuestions();\n        this.startNextRound();\n    }\n\n    /**\n     * старт раунда\n     * @returns \n     */\n    async startNextRound() {\n        //заглушка для сервера - неактуально\n        const answer = await this.player.getNextRound();\n        //    await  console.log(answer.gameSpecificData.text.fact);\n        //    await  console.log(answer.gameSpecificData.text.counter);\n        const question = await answer.gameSpecificData.text;\n\n        // console.log(answer.data.data.game_specific_data.text.fact);\n        //конец заглушки\n\n        await this.ui.prepareSectionForRound();\n        // const question = await this.data.getRandomQuestion();\n        // console.log(question);\n        // question.counter = await this.data.calculateInitialCurrents(question.counter);\n        // console.log(question.counter);\n\n        if (!question) {\n            alert('вопрос отсутствует');\n            return;\n        }\n\n        this.currentQuestion = structuredClone(question);\n        this.round++;\n\n        this.ui.showRound(this.round, question.counter, question.fact);\n        this.counterValues = question.counter;\n        if(this.round != 1){\n            await this.ui.waitForKeyPress();\n        }else{\n            await this.ui.delay(2000);\n        }\n        this.startCounter();\n\n        // Ожидаем клик, с таймаутом\n        const timeout = 20000;\n        const clickPromise = this.ui.waitForClick();\n        const timeoutPromise = new Promise(resolve => setTimeout(() => resolve('timeout'), timeout));\n\n        const result = await Promise.race([clickPromise, timeoutPromise]);\n\n        this.stopCounter();\n\n        if (result === 'timeout') {\n            console.warn('Время ожидания истекло');\n            this.handleFail(true); // true —  таймаут\n        } else {\n            const isCorrect = this.checkText();\n            isCorrect ? this.handleSuccess() : this.handleFail(false);\n        }\n    }\n\n    /**\n     * старт счетчика\n     */\n    startCounter() {\n        this.started = true;\n        this.doCycle();\n    }\n\n    /**\n   * стоп счетчика\n   */\n    async stopCounter() {\n        this.started = false;\n\n        const isCorrect = this.checkText();\n\n        const result = {\n            points: isCorrect ? 5 : 0,\n            success: isCorrect,\n            round: this.round\n        };\n\n        // this.player.saveResult(result);\n        this.player.sendResultToServer?.(isCorrect, result.round);\n\n        if (isCorrect) {\n            this.failedAttempts = 0;\n            await this.ui.showSuccess(result);\n        } else {\n            this.failedAttempts++;\n            await this.ui.showFail(result);\n        }\n\n        if (this.failedAttempts >= this.maxFails) {\n            this.ui.showTooManyFails();\n            return;\n        }\n\n    }\n\n    /**\n   * успех\n   */\n    async handleSuccess() {\n        const result = {\n            points: 5,\n            success: true,\n            round: this.round\n        };\n\n        this.failedAttempts = 0;\n        await this.ui.showSuccess(result);\n\n\n        if (this.round >= this.maxRounds) {\n            this.ui.showEnd(this.player.getScore());\n        } else {\n            this.startNextRound();\n        }\n    }\n\n    /**\n   * неудача + обработка по таймеру\n   */\n    async handleFail(isTimeout = false) {\n        const result = {\n            points: 0,\n            success: false,\n            round: this.round,\n            timeout: isTimeout\n        };\n\n        await this.ui.showFail(result);\n\n        this.ui.prepareSectionForRound();\n        if (this.failedAttempts >= this.maxFails) {\n            this.ui.showTooManyFails();\n            return;\n        }\n        if (this.round >= this.maxRounds) {\n            this.ui.showEnd(this.player.getScore());\n        } else {\n            this.startNextRound();\n        }\n    }\n\n\n    doCycle() {\n        if (!this.started) return;\n\n        this.textNext();\n\n        this.ui.updateCounter(this.counterValues);\n        setTimeout(() => this.doCycle(), 120);\n    }\n\n    textNext() {\n        for (let i = this.counterValues.length - 1; i >= 0; i--) {\n            let el = this.counterValues[i];\n            el.current++;\n            if (el.current < el.alfabet.length) break;\n            else el.current = 0;\n        }\n    }\n\n    checkText() {\n        return this.counterValues.every((c, i) => c.current === c.target);\n    }\n\n}\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GameManager);\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/game/gameManager.js?")},"./src/assets/js/game/player.js":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _auth_adminAuth_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../auth/adminAuth.js */ \"./src/assets/js/auth/adminAuth.js\");\n\n\nclass Player {\n    static gameToken = 'gAmEToKeN1';\n    static adminKey = 'Q3z8vKp9N2w5R6s1Xy7L';\n\n    constructor() {\n        this.token = null;\n        this.name = null;\n        this.badge = null;\n        this.sessionToken = null;\n        this.answers = [];\n        this.scope = 0;\n    }\n\n    /**\n     * Установить данные игрока при старте игры\n     */\n    initializePlayer(data) {\n        this.token = data.player.player_token;\n        this.name = data.player.name;\n        this.badge = data.player.badge_id;\n        this.sessionToken = data.session_token;\n\n        console.log('[Player] Данные игрока установлены:', {\n            token: this.token,\n            name: this.name,\n            badge: this.badge,\n            sessionToken: this.sessionToken\n        });\n    }\n\n    comparePlayer(data){\n        console.log(this.sessionToken)\n        console.log(data.session_token)\n        return this.sessionToken == data.session_token ? true : false;\n    }\n\n    /**\n     * сохранение результата\n     * @param {*} result \n     */\n    saveResult(result) {\n        this.scope += result.points;\n        this.answers.push(result.points);\n        console.log('данные сохранены' + this.scope)\n    }\n\n    /**\n     * получение данных о баллах\n     * @returns \n     */\n    getScore() {\n        return this.scope;\n    }\n\n    /**\n     * получение имени\n     * @returns \n     */\n    getName() {\n        const arr = this.name.split(\" \")\n        return arr[0];\n    }\n\n    /**\n    * Отправляет результат раунда на сервер\n    * @param {boolean} success - Успешно ли выполнено действие\n    * @param {number} roundNumber - Номер раунда\n    * @returns {Promise<{\n    *   outcome: string,\n    *   sessionStatus: string,\n    *   scoreChange: number,\n    *   sessionScore: number,\n    *   previousBestScore?: number,\n    *   updatedBestScore?: number,\n    *   scoreDifference?: number,\n    *   resultData: {\n    *     correct: boolean,\n    *     is_first_success: boolean,\n    *     target_time_ms: number,\n    *     actual_time_ms: number|null\n    *   }\n    * }|null>}\n    */\n    async sendResultToServer(success, roundNumber) {\n        const token = _auth_adminAuth_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getToken();\n\n        if (!token) {\n            console.error('[AUTH] Нет токена администратора');\n            window.location.href = '/auth.html';\n            return;\n        }\n\n        const url = `https://gameserver2.kemo.ru/api/games/${Player.gameToken}/session/${this.sessionToken}/submit`;\n\n        console.log(`[API] Отправка результата раунда ${roundNumber}:`, {\n            success,\n            'Authorization': `Bearer ${token}`,\n            // gameToken: Player.gameToken,\n            sessionToken: this.sessionToken\n        });\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Player-Token': this.token\n                },\n                body: JSON.stringify({\n                    round_number: roundNumber,\n                    payload: { success }\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const result = await response.json();\n            console.log('[API] Ответ сервера:', result);\n\n            if (!result.data.success) {\n                console.warn('[API] Ошибка в ответе:', result.data.message, 'Code:', result.data.code);\n                return null;\n            }\n\n            // Сохраняем результат\n            this.saveResult({ points: result.data.score_change });\n\n            // Формируем возвращаемый объект\n            return {\n                outcome: result.data.outcome,\n                sessionStatus: result.data.session_status,\n                scoreChange: result.data.score_change,\n                sessionScore: result.data.session_score,\n                ...(result.data.previous_best_score !== undefined && {\n                    previousBestScore: result.data.previous_best_score,\n                    updatedBestScore: result.data.updated_best_score,\n                    scoreDifference: result.data.score_difference\n                }),\n                resultData: result.data.result_data\n            };\n\n        } catch (error) {\n            console.error('[API] Ошибка при отправке результата:', error);\n            return null;\n        }\n    }\n\n      /**\n     * метод для сервера - не актуально, но нужен для правильный работы сервера. \n     * @returns \n     */\n      async getNextRound() {\n        const url = `https://gameserver2.kemo.ru/api/games/${Player.gameToken}/session/${this.sessionToken}/next`;\n        \n        console.log(`[API] Запрос следующего раунда для сессии ${this.sessionToken}`);\n    \n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Player-Token': this.token\n                }\n            });\n    \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n    \n            const result = await response.json();\n            console.log('[API] Ответ сервера:', result);\n    \n            if (!result.data.success) {\n                console.warn('[API] Ошибка в ответе:', result.data.message, 'Code:', result.data.code);\n                \n                // Специальная обработка для завершенных раундов\n                if (result.data.code === 'NO_MORE_ROUNDS') {\n                    return { noMoreRounds: true, message: result.data.message };\n                }\n                \n                return null;\n            }\n    \n            // Форматируем данные для удобства использования\n            return {\n                sessionToken: result.data.session_token,\n                gameToken: result.data.game_token,\n                status: result.data.status,\n                roundNumber: result.data.round_number,\n                gameSpecificData: {\n                    factId: result.data.game_specific_data.fact_id,\n                    text: result.data.game_specific_data.text,\n                    targetTimeMs: result.data.game_specific_data.target_time_ms\n                }\n            };\n    \n        } catch (error) {\n            console.error('[API] Ошибка при запросе следующего раунда:', error);\n            return null;\n        }\n    }\n    \n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);\n\n//# sourceURL=webpack://vitaliy.wp.dev/./src/assets/js/game/player.js?")}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];return void 0!==e||(e=__webpack_module_cache__[n]={exports:{}},__webpack_modules__[n].call(e.exports,e,e.exports,__webpack_require__)),e.exports}__webpack_require__.m=__webpack_modules__,!function(){var l=[];__webpack_require__.O=function(n,e,t,s){if(!e){for(var a=1/0,r=0;r<l.length;r++){for(var o,e=l[r][0],t=l[r][1],s=l[r][2],i=!0,c=0;c<e.length;c++)(!1&s||s<=a)&&Object.keys(__webpack_require__.O).every(function(n){return __webpack_require__.O[n](e[c])})?e.splice(c--,1):(i=!1,s<a&&(a=s));i&&(l.splice(r--,1),void 0!==(o=t()))&&(n=o)}return n}s=s||0;for(var r=l.length;0<r&&l[r-1][2]>s;r--)l[r]=l[r-1];l[r]=[e,t,s]}}(),__webpack_require__.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},__webpack_require__.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},!function(){function n(n,e){var t,s,a,r=e[0],o=e[1],i=e[2],c=0;if(r.some(function(n){return 0!==l[n]})){for(t in o)__webpack_require__.o(o,t)&&(__webpack_require__.m[t]=o[t]);i&&(a=i(__webpack_require__))}for(n&&n(e);c<r.length;c++)s=r[c],__webpack_require__.o(l,s)&&l[s]&&l[s][0](),l[s]=0;return __webpack_require__.O(a)}var l={app:0},e=(__webpack_require__.O.j=function(n){return 0===l[n]},self.webpackChunkvitaliy_wp_dev=self.webpackChunkvitaliy_wp_dev||[]);e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))}();var __webpack_exports__=__webpack_require__.O(void 0,["common"],function(){return __webpack_require__("./src/assets/js/app.js")});__webpack_require__.O(__webpack_exports__)}();