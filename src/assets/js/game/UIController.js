class UIController {

    constructor() {
        this.roundEl = document.querySelector('#rounds');
        this.roundStatus = this.roundEl.querySelector('.round_status span');
        this.roundTarget = this.roundEl.querySelector('.round_target');
        this.counterContainer = this.roundEl.querySelector('.round_container');
        this.roundInfo = this.roundEl.querySelector('.round_info');
        this.roundCoinInfo = this.roundEl.querySelector('.round_coin_info');
        this.roundResult = this.roundEl.querySelector('.round_result');
        this.roundResultTotal = this.roundEl.querySelector('.round_reult_text');
        this.roundFinish = this.roundEl.querySelector('.round_finish');
    }

    /**
     * –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏ –∫ —Ä–∞–π–Ω–¥—É
     */
    prepareSectionForRound() {
        if (this.roundTarget.classList.contains('winner')) {
            this.roundTarget.classList.remove('winner');
        }
        this.hideElement([this.roundCoinInfo, this.roundResult, this.roundResultTotal, this.roundFinish]);
        this.showElement([this.roundStatus, this.roundTarget, this.counterContainer, this.roundInfo]);
    }

    /**
     * —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã 
     * @param {*} elements - –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    hideElement(elements) {
        elements.forEach(el => {
            el.classList.add('slide-hidden');
            setTimeout(() => {
                el.classList.add('none');
            }, this.animationTime);
        });
    }

    /**
    * –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã 
    * @param {*} elements - –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    */
    showElement(elements) {
        elements.forEach(el => {
            el.classList.remove('none');
            setTimeout(() => {
                el.classList.remove('slide-hidden');
            }, 10);
        });
    }
    /**
     * –æ–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ —ç–Ω—Ç–µ—Ä–∞
     * @returns 
     */
    waitForKeyPress() {
        return new Promise(resolve => {
            function handler(event) {
                if (event.code === 'Enter' || event.code === 'Space') {
                    document.removeEventListener('keydown', handler);
                    resolve();
                }
            }
            document.addEventListener('keydown', handler);
        });
    }

    /**
     * –æ–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –º–≤—à–∫–∏ –∏–ª–∏ –∫–ª–∞–≤–∏—à–∏
     * @returns 
     */
    waitForClick() {
        return new Promise(resolve => {
            const handler = () => {
                document.removeEventListener('keydown', handler);
                document.removeEventListener('mousedown', handler);
                resolve();
            };

            document.addEventListener('keydown', handler);
            document.addEventListener('mousedown', handler);
        });
    }

    /**
     * 
     * @param {*} counterArr 
     */
    updateCounter(counterArr) {
        this.counterContainer.innerHTML = counterArr.map((c, i, arr) => `
            <div class="digit-container">
                ${c.alfabet[c.current]}
                <div class="shadow ${i === arr.length - 1 ? 'green' : 'grey'}"></div>
            </div>
        `).join('');
    }

    /**
     * –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∏ –Ω–µ—É–¥–∞—á–∏ –ø–æ–¥—Ä—è–¥
     */
    async showTooManyFails() {
        this.roundEl.classList.add('default');
        this.roundTarget.innerHTML = '–ú—ã —Ç–∞–∫ –∏ –∑–Ω–∞–ª–∏, —á—Ç–æ –ë–∞—Ä–æ–º–∏—Ä —Å–ø—Ä–∞–≤–∏—Ç—Å—è –ª—É—á—à–µ —Ç–µ–±—è!';
        this.roundResultTotal.innerHTML = '<p>–ù–æ –ø—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!</p>'

        this.hideElement([this.roundStatus.parentElement, this.roundCoinInfo, this.counterContainer, this.roundResult, this.roundInfo]);
        await this.delay(500);
        this.showElement([this.roundFinish, this.roundResultTotal]);

        // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
        await this.delay(5000);
        // location.reload();
    }


    /**
     * –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
     * @param {*} id  id —Å—Ç–∞—Ä–æ–π —Å–µ–∫—Ü–∏–∏
     * @param {*} idNew id –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
     * @param {*}  name –∏–º—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å 
     */
    showSection(id, idNew, name = '') {

        if (name !== '') {
            document.querySelector('[data-name]').textContent = name;
        }

        const section = document.getElementById(id);
        section.classList.remove('active');
        setTimeout(() => section.classList.add('none'), 300);

        const next = document.getElementById(idNew);
        next.classList.remove('none');
        setTimeout(() => next.classList.add('active'), 10);
    }

    /**
    * —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    */
    async runBacktimer() {
        const countEl = document.querySelector('[data-count]');
        const textEl = document.querySelector('[data-text]');

        for (let i = 3; i > 0; i--) {

            countEl.querySelector(`[data-num="${i}"]`).classList.add('active');
            await this.delay(1000);
            countEl.querySelector(`[data-num="${i}"]`).classList.add('slide');

        }

        setTimeout(() => {
            textEl.classList.add('active');
        }, 300);
        await this.delay(1000);
        textEl.classList.add('scale');
        setTimeout(() => {
            textEl.classList.remove('active');
        }, 300);


        //–ø—Ä–æ–¥—É–±–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞–∞—Ü–∏–∏
        await this.delay(1000)
    }

    /**
    * –∑–∞–¥–µ—Ä–∂–∫–∞
    * @param {*} ms 
    * @returns 
    */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥
     * @param {*} roundNumber 
     * @param {*} counterArr 
     * @param {*} fact 
     */
    showRound(roundNumber, counterArr, fact) {
        this.roundEl.classList.remove('none');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ —Ä–∞—É–Ω–¥–µ
        this.roundStatus.textContent = roundNumber;
        this.roundStatus.closest('.round_status').style.display = 'block';
        this.roundTarget.style.display = 'block';
        this.roundInfo.style.display = 'block';

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏
        const target = counterArr.map(c => c.alfabet[c.target]).join('');
        this.roundTarget.innerHTML = `–ü–û–ô–ú–ê–ô ${target}`;
        this.roundInfo.innerHTML = fact;

        // –û—á–∏—â–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞
        this.counterContainer.innerHTML = '';
        this.counterContainer.style.display = 'flex';

        counterArr.forEach((digit, i) => {
            const digitContainer = document.createElement('div');
            digitContainer.classList.add('digit-container');
            const safeIndex = typeof digit.current === 'number' ? digit.current : 0;
            digitContainer.textContent = digit.alfabet[safeIndex] ?? '?';

            const shadow = document.createElement('div');
            shadow.classList.add('shadow');
            shadow.classList.add(i === counterArr.length - 1 ? 'green' : 'grey');

            digitContainer.appendChild(shadow);
            this.counterContainer.appendChild(digitContainer);
        });
    }

    /**
     * –±–ª–∏–∫ —Ñ–æ–Ω–∞
     * @param {*} selector 
     */
    async showblick(selector) {
        const image = document.querySelector(selector);
        image.classList.remove('hide');
        image.classList.add('blick');
        await this.delay(5000);
        image.classList.remove('blick');
        image.classList.add('hide');
    }

    /**
     * –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
     * @param {*} result —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–∫—Ç 
     */
    async showSuccess(result) {
        this.changecolor('green');
        this.roundEl.classList.add('right');
        this.roundEl.classList.remove('default');

        setTimeout(() => {
            this.showSalut();
        }, 2000);
        await this.showblick('.victory');

        this.hideElement([this.counterContainer, this.roundInfo]);
        this.showElement([this.roundCoinInfo, this.roundResult]);

        this.roundTarget.classList.add('winner');
        this.roundTarget.innerHTML = '–¢–æ—á–Ω–æ, –∫–∞–∫ 2–ì–ò–°!  <br> –ù–∞¬†—Ç–≤–æ—ë–º —Å—á–µ—Ç—É:';

        this.roundCoinInfo.querySelector('span').textContent = result.points;

        for (let i = 3; i > 0; i--) {
            this.roundResult.querySelector('span').textContent = i;
            await this.delay(1000);
        }
        this.roundEl.classList.add('default');
        this.roundEl.classList.remove('right');
    }

    /**
     * –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É
     * @param {*} result 
     */
    async showFail(result) {
        this.changecolor('red');
        this.roundEl.classList.add('wrong');
        this.roundEl.classList.remove('default');
        await this.showblick('.fail');

        this.hideElement([this.counterContainer, this.roundInfo]);
        this.showElement([this.roundResult]);
        this.roundTarget.classList.add('winner');
        if (result.round === 3) {
            this.roundTarget.innerHTML = '–ú–¥–∞, –ø–ª–æ—Ö–æ. –ü–ª–æ—Ö–æ-–ø–ª–æ—Ö–æ, –Ω–µ–≤–∞–∂–Ω–æ üòê <br> –ï—â—ë –∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å';
            this.roundResult.innerHTML = '–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ <span>3</span>'
        } else {
            this.roundTarget.innerHTML = '–ú–¥–∞, –ø–ª–æ—Ö–æ. –ü–ª–æ—Ö–æ-–ø–ª–æ—Ö–æ, –Ω–µ–≤–∞–∂–Ω–æ üòê <br> –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!';
        }
        for (let i = 3; i > 0; i--) {
            this.roundResult.querySelector('span').textContent = i;
            await this.delay(1000);
        }

        this.roundEl.classList.add('default');
        this.roundEl.classList.remove('wrong');

        // result.round == 3 ? this.showEnd(result) : '';
    }

    /**
     * –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∞–ª—é—Ç
     * @returns 
     */
    showSalut() {
        return new Promise((resolve) => {
            const coinImages = ['Coin.svg', 'Silver.svg', 'Gold.svg'];
            const count = 100;
            const container = document.getElementById('coin-fireworks');
            if (!container) return resolve();

            let done = 0;

            for (let i = 0; i < count; i++) {
                const img = document.createElement('img');
                img.src = `./assets/images/salut/${coinImages[Math.floor(Math.random() * coinImages.length)]}`;
                img.classList.add('coin-piece');

                const startX = Math.random() * window.innerWidth;
                const delay = Math.random() * 1000; 

                img.style.left = `${startX}px`;
                img.style.top = `-50px`;
                img.style.animationDelay = `${delay}ms`;

                container.appendChild(img);

                setTimeout(() => {
                    img.remove();
                    done++;
                    if (done === count) resolve();
                }, 2500 + delay); // –∑–∞–¥–µ—Ä–∂–∫–∞ + –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
            }
        });
    }



    /**
     * —Å–º–µ–Ω–∞ —Ñ–æ–Ω–∞ —Ü–∏—Ñ—Ä
     * @param {*} color 
     */
    changecolor(color) {
        const shadows = this.counterContainer.querySelectorAll('.shadow');
        shadows.forEach(shadow => {
            if (shadow.classList.contains('grey') || shadow.classList.contains('green')) {
                shadow.classList.remove('grey');
                shadow.classList.remove('green');
                shadow.classList.add(color);
            }
        });
    }

    /**
     * –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–∞
     * @param {*} scope 
     */
    async showEnd(scope) {
        this.roundEl.classList.add('default');
        this.roundTarget.innerHTML = '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, <br> –Ω–∞¬†—Ç–≤–æ—ë–º —Å—á–µ—Ç—É:';
        this.roundCoinInfo.querySelector('span').textContent = scope;

        this.hideElement([this.roundStatus.parentElement, this.counterContainer, this.roundResult, this.roundInfo]);
        await this.delay(500);
        this.showElement([this.roundCoinInfo, this.roundResultTotal, this.roundFinish]);


        // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
        await this.delay(5000);
        // location.reload();

    }
}
export default UIController;