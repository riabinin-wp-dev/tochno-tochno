import PlayerPool from "./sessionPool.js";

/**
 * –∫–ª–∞—Å—Å –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
 */
class Player {
    static BASE_URL = 'https://gameserver2.kemo.ru/api';

    constructor(playerToken = null) {
        this.playerToken = playerToken;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {*} badgeId 
     * @param {*} name 
     * @param {*} telegramNick 
     * @returns 
     */

    static async register(badgeId, name, telegramNick = null) {
        const payload = {
            badge_id: String(badgeId),
            name: name
        };

        if (telegramNick) {
            payload.telegram_nick = telegramNick;
        }

        const response = await fetch(`${Player.BASE_URL}/players`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });

        const result = await response.json();

        if (result.data.success) {
            const player = new Player(result.data.player_token);
            player.badgeId = result.data.badge_id;
            player.name = result.data.name;
            player.telegramNick = result.data.telegram_nick;
            player.token = result.data.player_token;
            console.log('–ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', player);

            //—Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
            const pool = await PlayerPool.addToPool(result.data.player_token);

            if (pool && pool.success) {
                const poolInstance = new PlayerPool(); // –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π –∑–∞—Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω
                await poolInstance.loadPool();
            }
            return player;
       
        } else if (result.data.success == false && result.data.code == 'DUPLICATE_BADGE_ID') {
            console.warn(result.data.message);
            console.log(result);
            alert('–û—à–∏–±–∫–∞: ' + result.data.message);

            //—Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
            // const pool = await PlayerPool.addToPool(playerToken);

            // if (pool && pool.success) {
                // const poolInstance = new PlayerPool(); // –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π –∑–∞—Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω
                // await poolInstance.loadPool();
            // }

            return null;
            
        } else if(result.data.code === 'VALIDATION_ERROR'){
            alert('–ù–µ–ø—Ä–æ–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è' + result.data.details)
            console.warn('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', result.data.details);
            return null;
            
        } else {
            alert("–û—à–∏–±–∫–∞: " + result.data.message);
            console.warn('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', result.data.message)
            return null;
        }
    }

    /**
     * –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
     * @param {*} badgeId 
     */
    static async search(badgeId) {

        const response = await fetch(`${Player.BASE_URL}/players/badge/${badgeId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
        })
        const result = await response.json();
        return result;
    }

    //  –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    async fetchProfile() {
        if (!this.playerToken) {
            throw new Error('üîí –¢–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.');
        }

        const response = await fetch(`${Player.BASE_URL}/players/me`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Player-Token': this.playerToken,
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å X-Game-Token, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
            }
        });

        const result = await response.json();

        if (result.data?.success) {
            console.log('üìÑ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞:', result.data);
            return result.data;
        } else {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', result.data?.message);
            return null;
        }
    }
}


export default Player;