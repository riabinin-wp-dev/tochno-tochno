import PlayerPool from "./sessionPool.js";
import Swal from 'sweetalert2';

/**
 * –∫–ª–∞—Å—Å –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
 */
class Player {
    // static BASE_URL = 'https://gameserver2.kemo.ru/api';
    static BASE_URL = 'https://cf.2gis.ru/api';

    constructor(playerToken = null) {
        this.playerToken = playerToken;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     * @param {*} badgeId 
     * @param {*} name 
     * @param {*} telegramNick 
     * @returns 
     */

    static async register(badgeId, name, telegramNick = null) {
        const payload = {
            badge_id: String(badgeId),
            name: name
        };

        if (telegramNick) {
            payload.telegram_nick = telegramNick;
        }

        const response = await fetch(`${Player.BASE_URL}/players`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });

        const result = await response.json();

        if (result.data.success) {
            const player = new Player(result.data.player_token);
            player.badgeId = result.data.badge_id;
            player.name = result.data.name;
            player.telegramNick = result.data.telegram_nick;
            player.token = result.data.player_token;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ localStorage
            Player.savePlayerToLocalStorage({
                badge_id: player.badgeId,
                name: player.name,
                player_token: player.token,
                telegram_nick: player.telegramNick
            });

            console.log('–ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', player);

            //—Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
            const pool = await PlayerPool.addToPool(result.data.player_token);

            if (pool && pool.success) {
                const poolInstance = new PlayerPool();
                await poolInstance.loadPool();
            }
            return player;

        } else if (result.data.success == false && result.data.code == 'DUPLICATE_BADGE_ID') {
            console.warn(result.data.message);
            console.log(result);
            // alert('–û—à–∏–±–∫–∞: ' + result.data.message);

            Swal.fire({
                // icon: 'error', // –∏–ª–∏ 'success', 'error', 'warning', 'question'
                // title: '–û—à–∏–±–∫–∞',
                text: result.data.message,
            });

            //—Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
            // const pool = await PlayerPool.addToPool(playerToken);

            // if (pool && pool.success) {
            // const poolInstance = new PlayerPool(); 
            // await poolInstance.loadPool();
            // }

            return null;

        } else if (result.data.code === 'VALIDATION_ERROR') {
            // alert('–ù–µ–ø—Ä–æ–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è' + result.data.details)
             Swal.fire({
                icon: 'error', // –∏–ª–∏ 'success', 'error', 'warning', 'question'
                title: '–ù–µ–ø—Ä–æ–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è',
                text: result.data.message,
            });
            console.warn('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', result.data.details);
            return null;

        } else {
            // alert("–û—à–∏–±–∫–∞: " + result.data.message);
              Swal.fire({
                icon: 'error', // –∏–ª–∏ 'success', 'error', 'warning', 'question'
                title: '–û—à–∏–±–∫–∞',
                text: result.data.message,
            });
            console.warn('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', result.data.message)
            return null;
        }
    }

    /**
     *  –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ localStorage
     * @param {*} playerData 
     */
    static savePlayerToLocalStorage(playerData) {
        try {
            const players = Player.getPlayersFromLocalStorage();
            const existingPlayerIndex = players.findIndex(p => p.badge_id === playerData.badge_id);

            if (existingPlayerIndex !== -1) {
                players[existingPlayerIndex] = playerData;
            } else {
                players.push(playerData);
            }

            localStorage.setItem('registeredPlayers', JSON.stringify(players));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ localStorage
     * @returns 
     */
    static getPlayersFromLocalStorage() {
        try {
            const playersJSON = localStorage.getItem('registeredPlayers');
            return playersJSON ? JSON.parse(playersJSON) : [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ badge_id
     * @param {*} badgeId 
     * @returns 
     */
    static getPlayerByBadgeId(badgeId) {
        const players = Player.getPlayersFromLocalStorage();
        return players.find(player => player.badge_id === String(badgeId));
    }

    /**
     * –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ localStorage –ø–æ badge_id
     * @param {*} badgeId 
     * @returns 
     */
    static removePlayerFromLocalStorage(badgeId) {
        try {
            const players = Player.getPlayersFromLocalStorage();
            const updatedPlayers = players.filter(player => player.badge_id !== String(badgeId));
            localStorage.setItem('registeredPlayers', JSON.stringify(updatedPlayers));
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
            return false;
        }
    }

    /**
     * –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
     * @param {*} badgeId 
     */
    static async search(badgeId) {

        const response = await fetch(`${Player.BASE_URL}/players/badge/${badgeId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
        })
        const result = await response.json();
        return result;
    }

    //  –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    async fetchProfile() {
        if (!this.playerToken) {
            throw new Error('üîí –¢–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.');
        }

        const response = await fetch(`${Player.BASE_URL}/players/me`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Player-Token': this.playerToken,
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å X-Game-Token, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
            }
        });

        const result = await response.json();

        if (result.data?.success) {
            console.log('üìÑ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞:', result.data);
            return result.data;
        } else {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', result.data?.message);
            return null;
        }
    }
}


export default Player;